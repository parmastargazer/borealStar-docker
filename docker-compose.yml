# version: '3.9'
# version: "3.3"


volumes:
  pgdata:
    driver: local
  backend_storage:
    driver: local 


networks:
  bsnet0:
    driver: bridge
    # ipam:
      # driver: default
      # config:
      # - subnet: 172.16.0.0/16
        # ip_range: 172.16.5.0/24 
        # gateway: 172.16.255.255
        # gateway: 172.16.0.4


services:
  # database development
  database:
    build: 
      context: _docker/postgres/
      dockerfile: Dockerfile.dev
    container_name: "bs_db"
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/
      - ./_docker/postgres/dumps:/opt/dumps/:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --quiet"]
      interval: 10s
      timeout: 40s
      retries: 5

    env_file:
      - ./_docker/postgres/.env.postgres 

    profiles:
    - local
    - prod

    networks:
      bsnet0:
    expose:
      - 5432

  # backend development
  backend:
    container_name: "bs_backend"
    build: 
      context: .
      dockerfile: _docker/backend/Dockerfile.alpine

    expose:
      - 8000
      - 443
    profiles:
    - local
      
    depends_on:
      database:
        condition: service_healthy
      
    environment:
      - CMD_PATH=/app/

    networks:
      bsnet0:

    volumes:
      - backend_storage:/app/storage/
      - ./backend/:/app/

  frontend:
    container_name: "bs_frontend"
    volumes:
      - ./frontend/:/var/www/html:rw
    build: 
      context: .
      dockerfile: _docker/frontend/Dockerfile

    profiles:
    - local
    - prod

    networks:
      bsnet0:
        # ipv4_address: 172.16.0.4
    expose:
      - 5173
      - 8000
    ports:
    - 81:5173
  

  # future production backend 
  backend_prod:
    container_name: bs_backend_prod
    build: 
      context: .
      dockerfile: _docker/backend/Dockerfile.alpine.prod
    expose:
      - 8000
      - 443
    networks:
      bsnet0:
        # ipv4_address: 172.16.0.2

    profiles:
    - prod
      
    depends_on:
      database:
        condition: service_healthy
      
    environment:
      - CMD_PATH=/app/
    volumes:
      - backend_storage:/app/storage/
      - ./backend/:/app/

  # db adminer
  adminer:
    container_name: "bs_adminer"
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      database:
        condition: service_healthy
    networks:
      - bsnet0
    profiles:
    - local

