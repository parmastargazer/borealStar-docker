ARG PHPVERSION=8.2

# FROM nginx:alpine AS nginx
FROM php:${PHPVERSION}-fpm-alpine AS php-fpm
# FROM composer:latest AS composer

ENV USERNAME process
ENV USERGROUP users

ENV CMD_PATH /app
ENV ENTRY_PREFIX /srv
# ENV CMD_PATH /var/www/html/

# set proccess user
RUN adduser -u 2000 -G users -s /bin/sh -D ${USERNAME}

# prerequesite for php extentions 
RUN apk add libpq-dev 

# tools
RUN apk add lsof


# configure php and ext/
ADD _docker/backend/conf/php/php.ini-development /usr/local/etc/php/php.ini-development
RUN docker-php-ext-configure pdo_pgsql
RUN docker-php-ext-install pdo_pgsql

# laravel WSS requesite
RUN docker-php-ext-install pcntl
RUN docker-php-ext-configure pcntl --enable-pcntl

# crond is part of the openrc
RUN apk add openrc \
            busybox \
            composer \
            nginx \
            ca-certificates \
            --no-cache 

RUN apk update && apk upgrade

RUN chgrp -R 0 /bin/busybox 

# $(readlink -f ~username/.linuxbrew/node)


# copy crontabs 
ADD ./_docker/backend/conf/periodic-spool/ /etc/crontabs/
ADD ./_docker/backend/conf/periodic-etc/ /etc/periodic/ 
# configure caps for cron
# RUN setcap cap_setgid+ep /usr/sbin/crond
# log directory
RUN mkdir /var/log/server
RUN chmod -R 777 /var/log
RUN chown ${USERNAME}:${USERGROUP} /var/log/server -R


# copy conf files in etc root
ADD --chmod=555 ./_docker/backend/conf/etc/ /etc/

# copy code
WORKDIR ${CMD_PATH}
ADD --chown=${USERNAME}:${USERGROUP} --chmod=775 ./backend/ .

# copy nginx
COPY ./_docker/backend/conf/nginx/ /etc/nginx/


RUN su -c "chmod -R 777 ${CMD_PATH}"
RUN su -c "chown -R 2000:users ${CMD_PATH}/*"

ADD --chown=${USERNAME}:users --chmod=775 _docker/backend/entrypoint.sh ${ENTRY_PREFIX}/



EXPOSE 8000 85 8080 443

# using root cause crond cannot work without that
# USER ${USERNAME}
ENTRYPOINT /bin/ash $ENTRY_PREFIX/entrypoint.sh
